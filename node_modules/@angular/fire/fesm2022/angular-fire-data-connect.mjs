import { ɵgetAllInstancesOf as _getAllInstancesOf, ɵgetDefaultInstanceOf as _getDefaultInstanceOf, VERSION, ɵAngularFireSchedulers as _AngularFireSchedulers, ɵzoneWrap as _zoneWrap } from '@angular/fire';
import { DataConnect, connectDataConnectEmulator as connectDataConnectEmulator$1, executeMutation as executeMutation$1, executeQuery as executeQuery$1, getDataConnect as getDataConnect$1, mutationRef as mutationRef$1, queryRef as queryRef$1, setLogLevel as setLogLevel$1, subscribe as subscribe$1, terminate as terminate$1, toQueryRef as toQueryRef$1 } from 'firebase/data-connect';
export * from 'firebase/data-connect';
export { DataConnect } from 'firebase/data-connect';
import { timer, from } from 'rxjs';
import { concatMap, distinct } from 'rxjs/operators';
import * as i0 from '@angular/core';
import { InjectionToken, Optional, NgModule, makeEnvironmentProviders, NgZone, Injector } from '@angular/core';
import { FirebaseApp, FirebaseApps } from '@angular/fire/app';
import { registerVersion } from 'firebase/app';

const DATA_CONNECT_PROVIDER_NAME = 'data-connect';
class DataConnectInstances {
    constructor() {
        return _getAllInstancesOf(DATA_CONNECT_PROVIDER_NAME);
    }
}
const dataConnectInstance$ = timer(0, 300).pipe(concatMap(() => from(_getAllInstancesOf(DATA_CONNECT_PROVIDER_NAME))), distinct());

const PROVIDED_DATA_CONNECT_INSTANCES = new InjectionToken('angularfire2.data-connect-instances');
function defaultDataConnectInstanceFactory(provided, defaultApp) {
    return _getDefaultInstanceOf(DATA_CONNECT_PROVIDER_NAME, provided, defaultApp);
}
function dataConnectInstanceFactory(fn) {
    return (zone, injector) => {
        return zone.runOutsideAngular(() => fn(injector));
    };
}
const DATA_CONNECT_INSTANCES_PROVIDER = {
    provide: DataConnectInstances,
    deps: [
        [new Optional(), PROVIDED_DATA_CONNECT_INSTANCES],
    ]
};
const DEFAULT_DATA_CONNECT_INSTANCE_PROVIDER = {
    provide: DataConnect,
    useFactory: defaultDataConnectInstanceFactory,
    deps: [
        [new Optional(), PROVIDED_DATA_CONNECT_INSTANCES],
        FirebaseApp,
    ]
};
class DataConnectModule {
    constructor() {
        registerVersion('angularfire', VERSION.full, 'fdc');
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.0.0", ngImport: i0, type: DataConnectModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "19.0.0", ngImport: i0, type: DataConnectModule });
    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "19.0.0", ngImport: i0, type: DataConnectModule, providers: [
            DEFAULT_DATA_CONNECT_INSTANCE_PROVIDER,
            DATA_CONNECT_INSTANCES_PROVIDER,
        ] });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.0.0", ngImport: i0, type: DataConnectModule, decorators: [{
            type: NgModule,
            args: [{
                    providers: [
                        DEFAULT_DATA_CONNECT_INSTANCE_PROVIDER,
                        DATA_CONNECT_INSTANCES_PROVIDER,
                    ]
                }]
        }], ctorParameters: () => [] });
function provideDataConnect(fn, ...deps) {
    registerVersion('angularfire', VERSION.full, 'fdc');
    return makeEnvironmentProviders([
        DEFAULT_DATA_CONNECT_INSTANCE_PROVIDER,
        DATA_CONNECT_INSTANCES_PROVIDER,
        {
            provide: PROVIDED_DATA_CONNECT_INSTANCES,
            useFactory: dataConnectInstanceFactory(fn),
            multi: true,
            deps: [
                NgZone,
                Injector,
                _AngularFireSchedulers,
                FirebaseApps,
                ...deps,
            ],
        }
    ]);
}

// DO NOT MODIFY, this file is autogenerated by tools/build.ts
const connectDataConnectEmulator = _zoneWrap(connectDataConnectEmulator$1, true);
const executeMutation = _zoneWrap(executeMutation$1, true);
const executeQuery = _zoneWrap(executeQuery$1, true);
const getDataConnect = _zoneWrap(getDataConnect$1, true);
const mutationRef = _zoneWrap(mutationRef$1, true, 2);
const queryRef = _zoneWrap(queryRef$1, true, 2);
const setLogLevel = _zoneWrap(setLogLevel$1, true);
const subscribe = _zoneWrap(subscribe$1, true);
const terminate = _zoneWrap(terminate$1, true);
const toQueryRef = _zoneWrap(toQueryRef$1, true, 2);

/**
 * Generated bundle index. Do not edit.
 */

export { DataConnectInstances, DataConnectModule, connectDataConnectEmulator, dataConnectInstance$, executeMutation, executeQuery, getDataConnect, mutationRef, provideDataConnect, queryRef, setLogLevel, subscribe, terminate, toQueryRef };
//# sourceMappingURL=angular-fire-data-connect.mjs.map
